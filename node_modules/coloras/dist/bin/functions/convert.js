"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = __importDefault(require("prompts"));
const index_1 = require("../../lib/index");
exports.default = (copy) => __awaiter(void 0, void 0, void 0, function* () {
    const { conv_from_data } = yield (0, prompts_1.default)({
        type: "select",
        name: "conv_from_data",
        message: "Choose the color system that you would like to convert a color code from",
        choices: [
            {
                title: "hex",
                value: "hex",
            },
            {
                title: "rgb",
                value: "rgb",
            },
            {
                title: "hsl",
                value: "hsl",
            },
            {
                title: "hsv",
                value: "hsv",
            },
            {
                title: "cmyk",
                value: "cmyk",
            },
        ],
    });
    const conv_to_data_choices = conv_from_data === "hex" ? [{ title: "rgb", value: "rgb", }, { title: "hsl", value: "hsl", }, { title: "hsv", value: "hsv", }, { title: "cmyk", value: "cmyk", },] : conv_from_data === "rgb" ? [{ title: "hex", value: "hex", }, { title: "hsl", value: "hsl", }, { title: "hsv", value: "hsv", }, { title: "cmyk", value: "cmyk", },] : conv_from_data === "hsl" ? [{ title: "hex", value: "hex", }, { title: "rgb", value: "rgb", }, { title: "hsv", value: "hsv", }, { title: "cmyk", value: "cmyk", },] : conv_from_data === "hsv" ? [{ title: "hex", value: "hex", }, { title: "rgb", value: "rgb", }, { title: "hsl", value: "hsl", }, { title: "cmyk", value: "cmyk", },] : conv_from_data === "cmyk" ? [{ title: "hex", value: "hex", }, { title: "rgb", value: "rgb", }, { title: "hsl", value: "hsl", }, { title: "hsv", value: "hsv", },] : null;
    (0, prompts_1.default)([
        {
            type: "select",
            name: "conv_to_data",
            message: "Choose the color system that you would like to convert a color code to",
            choices: conv_to_data_choices
        },
        {
            type: "text",
            name: "conv_color",
            message: "Insert the color code you would like to convert",
            validate: (value) => {
                return (value.length === 0 ? "[i] color code cannot be empty!" : (0, index_1.isColor)(value).colorSystem !== conv_from_data ? "[✖] input is not a valid color code" : true);
            }
        }
    ]).then((response) => {
        const conversionFunc = response.conv_to_data === "hex" ? "toHex" : response.conv_to_data === "rgb" ? "toRgb" : response.conv_to_data === "hsl" ? "toHsl" : response.conv_to_data === "hsv" ? "toHsv" : response.conv_to_data === "cmyk" ? "toCmyk" : null;
        if (conversionFunc == null)
            return;
        if (!response.hasOwnProperty("conv_to_data") || !response.hasOwnProperty("conv_color"))
            process.exit();
        const color = new index_1.Color(response.conv_color);
        console.log("\x1b[32m%s\x1b[0m", `\n\n[√] converted to ${color[conversionFunc]()}`);
        if (copy) {
            require("child_process").spawn("clip").stdin.end(color[conversionFunc]());
            console.log("\x1b[36m%s\x1b[0m", "[i] copied to clipboard");
        }
    });
    process.on("uncaughtException", () => {
        process.exit();
    });
});
