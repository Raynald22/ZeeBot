"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isColor_1 = __importDefault(require("./isColor"));
const convert_1 = __importDefault(require("../utils/conversion/convert"));
const toArray_1 = __importDefault(require("../utils/toArray"));
class Color {
    constructor(color) {
        if (!color) {
            const letters = "0123456789ABCDEF";
            let randHex = "#";
            for (let i = 0; i < 6; i++) {
                randHex += letters[(Math.floor(Math.random() * 16))];
            }
            this.color = {
                hex: randHex,
                rgb: (0, convert_1.default)({ initial: "hex", final: "rgb", color: randHex }),
                hsl: (0, convert_1.default)({ initial: "hex", final: "hsl", color: randHex }),
                hsv: (0, convert_1.default)({ initial: "hex", final: "hsv", color: randHex }),
                cmyk: (0, convert_1.default)({ initial: "hex", final: "cmyk", color: randHex })
            };
            this.colorSystem = null;
            this.imageUrl = `https://dummyimage.com/600x400/${randHex.replace("#", "")}/${randHex.replace("#", "")}.png`;
        }
        else {
            if (!((0, isColor_1.default)(color).color))
                throw new TypeError("Passed parameter is not a valid color code");
            const hexcolor = (0, convert_1.default)({ initial: (0, isColor_1.default)(color).colorSystem, final: "hex", color: color });
            this.color = color;
            this.colorSystem = (0, isColor_1.default)(color).colorSystem;
            this.imageUrl = `https://dummyimage.com/600x400/${hexcolor.replace("#", "")}/${hexcolor.replace("#", "")}.png`;
        }
    }
    toHex() {
        const random = typeof this.color === "object" ? true : typeof this.color === "string" ? false : null;
        return (random ? this.color.hex : (0, convert_1.default)({ initial: this.colorSystem, final: "hex", color: this.color }));
    }
    toRgb() {
        const random = typeof this.color === "object" ? true : typeof this.color === "string" ? false : null;
        return (random ? this.color.rgb : (0, convert_1.default)({ initial: this.colorSystem, final: "rgb", color: this.color }));
    }
    toHsl() {
        const random = typeof this.color === "object" ? true : typeof this.color === "string" ? false : null;
        return (random ? this.color.hsl : (0, convert_1.default)({ initial: this.colorSystem, final: "hsl", color: this.color }));
    }
    toHsv() {
        const random = typeof this.color === "object" ? true : typeof this.color === "string" ? false : null;
        return (random ? this.color.hsv : (0, convert_1.default)({ initial: this.colorSystem, final: "hsv", color: this.color }));
    }
    toCmyk() {
        const random = typeof this.color === "object" ? true : typeof this.color === "string" ? false : null;
        return (random ? this.color.cmyk : (0, convert_1.default)({ initial: this.colorSystem, final: "cmyk", color: this.color }));
    }
    toArray() {
        const random = typeof this.color === "object" ? true : typeof this.color === "string" ? false : null;
        if (random) {
            const randomResult = {
                hex: (0, toArray_1.default)(this.color.hex),
                rgb: (0, toArray_1.default)(this.color.rgb),
                hsl: (0, toArray_1.default)(this.color.hsl),
                hsv: (0, toArray_1.default)(this.color.hsv),
                cmyk: (0, toArray_1.default)(this.color.cmyk),
            };
            return randomResult;
        }
        else {
            return (0, toArray_1.default)(this.color);
        }
    }
}
exports.default = Color;
