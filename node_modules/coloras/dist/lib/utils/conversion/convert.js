"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const functions_1 = require("./functions");
const toArray_1 = __importDefault(require("../toArray"));
exports.default = (options) => {
    const values = (0, toArray_1.default)(options.color);
    let result;
    switch (`${options.initial}-${options.final}`) {
        case "hex-hex": {
            result = options.color;
            break;
        }
        case "hex-rgb": {
            result = (0, functions_1.hex2rgb)(values[0], values[1], values[2]);
            break;
        }
        case "hex-hsl": {
            result = (0, functions_1.hex2hsl)(values[0], values[1], values[2]);
            break;
        }
        case "hex-hsv": {
            result = (0, functions_1.hex2hsv)(values[0], values[1], values[2]);
            break;
        }
        case "hex-cmyk": {
            result = (0, functions_1.hex2cmyk)(values[0], values[1], values[2]);
            break;
        }
        case "rgb-hex": {
            result = (0, functions_1.rgb2hex)(values[0], values[1], values[2]);
            break;
        }
        case "rgb-rgb": {
            result = options.color;
            break;
        }
        case "rgb-hsl": {
            const rgbValues = (0, toArray_1.default)((0, functions_1.rgb2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2hsl)(rgbValues[0], rgbValues[1], rgbValues[2]);
            break;
        }
        case "rgb-hsv": {
            const rgbValues = (0, toArray_1.default)((0, functions_1.rgb2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2hsv)(rgbValues[0], rgbValues[1], rgbValues[2]);
            break;
        }
        case "rgb-cmyk": {
            const rgbValues = (0, toArray_1.default)((0, functions_1.rgb2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2cmyk)(rgbValues[0], rgbValues[1], rgbValues[2]);
            break;
        }
        case "hsl-hex": {
            result = (0, functions_1.hsl2hex)(values[0], values[1], values[2]);
            break;
        }
        case "hsl-rgb": {
            const hslValues = (0, toArray_1.default)((0, functions_1.hsl2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2rgb)(hslValues[0], hslValues[1], hslValues[2]);
            break;
        }
        case "hsl-hsl": {
            result = options.color;
            break;
        }
        case "hsl-hsv": {
            const hslValues = (0, toArray_1.default)((0, functions_1.hsl2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2hsv)(hslValues[0], hslValues[1], hslValues[2]);
            break;
        }
        case "hsl-cmyk": {
            const hslValues = (0, toArray_1.default)((0, functions_1.hsl2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2cmyk)(hslValues[0], hslValues[1], hslValues[2]);
            break;
        }
        case "hsv-hex": {
            result = (0, functions_1.hsv2hex)(values[0], values[1], values[2]);
            break;
        }
        case "hsv-rgb": {
            const hsvValues = (0, toArray_1.default)((0, functions_1.hsv2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2rgb)(hsvValues[0], hsvValues[1], hsvValues[2]);
            break;
        }
        case "hsv-hsl": {
            const hsvValues = (0, toArray_1.default)((0, functions_1.hsv2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2hsl)(hsvValues[0], hsvValues[1], hsvValues[2]);
            break;
        }
        case "hsv-hsv": {
            result = options.color;
            break;
        }
        case "hsv-cmyk": {
            const hsvValues = (0, toArray_1.default)((0, functions_1.hsv2hex)(values[0], values[1], values[2]));
            result = (0, functions_1.hex2cmyk)(hsvValues[0], hsvValues[1], hsvValues[2]);
            break;
        }
        case "cmyk-hex": {
            result = (0, functions_1.cmyk2hex)(values[0], values[1], values[2], values[3]);
            break;
        }
        case "cmyk-rgb": {
            const cmykValues = (0, toArray_1.default)((0, functions_1.cmyk2hex)(values[0], values[1], values[2], values[3]));
            result = (0, functions_1.hex2rgb)(cmykValues[0], cmykValues[1], cmykValues[2]);
            break;
        }
        case "cmyk-hsl": {
            const cmykValues = (0, toArray_1.default)((0, functions_1.cmyk2hex)(values[0], values[1], values[2], values[3]));
            result = (0, functions_1.hex2hsl)(cmykValues[0], cmykValues[1], cmykValues[2]);
            break;
        }
        case "cmyk-hsv": {
            const cmykValues = (0, toArray_1.default)((0, functions_1.cmyk2hex)(values[0], values[1], values[2], values[3]));
            result = (0, functions_1.hex2hsv)(cmykValues[0], cmykValues[1], cmykValues[2]);
            break;
        }
        case "cmyk-cmyk": {
            result = options.color;
            break;
        }
    }
    return result;
};
